{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","changeHandler","e","preventDefault","setState","currentTarget","value","submitHandler","props","onCreate","id","shortid","generate","className","action","onSubmit","this","htmlFor","type","onChange","Component","ContactList","contacts","onDelete","map","onClick","Filter","inputHandler","onFilterChanged","target","App","filter","getContacts","JSON","parse","localStorage","getItem","saveContacts","setItem","stringify","newContact","find","alert","prevState","removeItemId","filteredContacts","toLowerCase","console","log","includes","prevProps","snapshot","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8XA2DeA,E,4MArDbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,cAAgB,SAAAC,GACdA,EAAEC,iBACF,EAAKC,SAAL,eAAiBF,EAAEG,cAAcN,KAAOG,EAAEG,cAAcC,S,EAG1DC,cAAgB,SAAAL,GACdA,EAAEC,iBADiB,MAEM,EAAKL,MAAtBC,EAFW,EAEXA,KAAMC,EAFK,EAELA,OACd,EAAKQ,MAAMC,SAAS,CAAEC,GAAIC,IAAQC,WAAYb,OAAMC,Y,uDAIpD,OACE,mCACE,uBACEa,UAAU,oBACVC,OAAO,MACPC,SAAUC,KAAKT,cAHjB,UAKE,uBAAOM,UAAU,qBAAqBI,QAAQ,SAA9C,mBAGA,uBACEJ,UAAU,qBACVH,GAAG,SACHX,KAAK,OACLmB,KAAK,OACLC,SAAUH,KAAKf,gBAEjB,uBAAOY,UAAU,qBAAqBI,QAAQ,QAA9C,qBAGA,uBACEJ,UAAU,qBACVH,GAAG,QACHX,KAAK,SACLmB,KAAK,MACLC,SAAUH,KAAKf,gBAEjB,wBAAQY,UAAU,sBAAsBK,KAAK,SAA7C,kC,GA7CgBE,aC0BXC,G,6KA1BH,IAAD,EACwBL,KAAKR,MAA5Bc,EADD,EACCA,SAAUC,EADX,EACWA,SAElB,OACE,qBAAKV,UAAU,yBAAf,SACE,oBAAIA,UAAU,oBAAd,SACGS,EAASE,KAAI,gBAAGd,EAAH,EAAGA,GAAIX,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,+BACE,iCACGD,EADH,MACYC,KAEZ,wBACEa,UAAU,6BACVK,KAAK,SACLO,QAAS,kBAAMF,EAASb,IAH1B,sBAJOA,c,GARKU,cCsBXM,G,kNArBbC,aAAe,SAAAzB,GACb,EAAKM,MAAMoB,gBAAgB1B,EAAE2B,OAAOvB,Q,uDAIpC,OACE,sBAAKO,UAAU,oBAAf,UACE,uBAAOA,UAAU,gBAAgBI,QAAQ,WAAzC,mCAGA,uBACEJ,UAAU,gBACVH,GAAG,WACHQ,KAAK,OACLC,SAAUH,KAAKW,sB,GAfJP,cCkFNU,E,4MA/EbhC,MAAQ,CAAEwB,SAAU,GAAIS,OAAQ,I,EAchCC,YAAc,WACZ,IAAMV,EAAWW,KAAKC,MAAMC,aAAaC,QAAQ,aAE5Cd,GAEL,EAAKlB,SAAS,CACZkB,c,EAIJe,aAAe,WACbF,aAAaG,QAAQ,WAAYL,KAAKM,UAAU,EAAKzC,MAAMwB,Y,EAG7Db,SAAW,SAAA+B,GACL,EAAK1C,MAAMwB,SAASmB,MAAK,qBAAG1C,OAAoByC,EAAWzC,QAC7D2C,MAAM,GAAD,OAAIF,EAAWzC,KAAf,6BAIP,EAAKK,UAAS,SAAAuC,GACZ,MAAO,CACLrB,SAAS,CAAEkB,GAAH,mBAAkBG,EAAUrB,gB,EAK1CM,gBAAkB,SAAAG,GAChB,EAAK3B,SAAS,CAAE2B,Y,EAGlBR,SAAW,SAAAqB,GACT,EAAKxC,UAAS,SAAAuC,GACZ,MAAO,CACLrB,SAAUqB,EAAUrB,SAASS,QAAO,qBAAGrB,KAAgBkC,SAI3D,EAAKP,gB,EAGPQ,iBAAmB,WAAO,IAAD,EACI,EAAK/C,MAA1BwB,EADiB,EACjBA,SAAUS,EADO,EACPA,OAIhB,OAHAA,EAASA,EAAOe,cAEhBC,QAAQC,IAAI,+BAAgC1B,GACrCA,EAASS,QAAO,qBAAGhC,KAAgB+C,cAAcG,SAASlB,O,kEAzDjEf,KAAKgB,gB,yCAGYkB,EAAWP,EAAWQ,GACnCR,EAAUrB,WAAaN,KAAKlB,MAAMwB,UAItCN,KAAKqB,iB,+BAqDL,IAAMf,EAAWN,KAAK6B,mBAEtB,OACE,gCACE,2CACA,cAAC,EAAD,CAAapC,SAAUO,KAAKP,WAE5B,0CACA,cAAC,EAAD,CAAQmB,gBAAiBZ,KAAKY,kBAC9B,cAAC,EAAD,CAAaN,SAAUA,EAAUC,SAAUP,KAAKO,kB,GA1EtCH,aCMHgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.72e520e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactForm.css';\nimport shortid from 'shortid';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  changeHandler = e => {\n    e.preventDefault();\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    this.props.onCreate({ id: shortid.generate(), name, number });\n  };\n\n  render() {\n    return (\n      <>\n        <form\n          className=\"ContactForm__form\"\n          action=\"URL\"\n          onSubmit={this.submitHandler}\n        >\n          <label className=\"ContactForm__label\" htmlFor=\"nameId\">\n            Name:\n          </label>\n          <input\n            className=\"ContactForm__input\"\n            id=\"nameId\"\n            name=\"name\"\n            type=\"text\"\n            onChange={this.changeHandler}\n          ></input>\n          <label className=\"ContactForm__label\" htmlFor=\"telId\">\n            Number:\n          </label>\n          <input\n            className=\"ContactForm__input\"\n            id=\"telId\"\n            name=\"number\"\n            type=\"tel\"\n            onChange={this.changeHandler}\n          ></input>\n          <button className=\"ContactForm__button\" type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onCreate: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactList.css';\n\nclass ContactList extends Component {\n  render() {\n    const { contacts, onDelete } = this.props;\n\n    return (\n      <div className=\"ContactList__container\">\n        <ul className=\"ContactList__list\">\n          {contacts.map(({ id, name, number }) => (\n            <li key={id}>\n              <span>\n                {name} - {number}\n              </span>\n              <button\n                className=\"ContactList__delete-button\"\n                type=\"button\"\n                onClick={() => onDelete(id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Filter.css';\n\nclass Filter extends Component {\n  inputHandler = e => {\n    this.props.onFilterChanged(e.target.value);\n  };\n\n  render() {\n    return (\n      <div className=\"Filter__container\">\n        <label className=\"Filter__label\" htmlFor=\"filterId\">\n          Find contacts by name\n        </label>\n        <input\n          className=\"Filter__input\"\n          id=\"filterId\"\n          type=\"text\"\n          onChange={this.inputHandler}\n        ></input>\n      </div>\n    );\n  }\n}\n\nexport default Filter;\n\nFilter.propTypes = {\n  onFilterChanged: PropTypes.func.isRequired,\n};\n","import './App.css';\nimport React, { Component } from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  state = { contacts: [], filter: '' };\n\n  componentDidMount() {\n    this.getContacts();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.contacts === this.state.contacts) {\n      return;\n    }\n\n    this.saveContacts();\n  }\n\n  getContacts = () => {\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\n\n    if (!contacts) return;\n\n    this.setState({\n      contacts,\n    });\n  };\n\n  saveContacts = () => {\n    localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  };\n\n  onCreate = newContact => {\n    if (this.state.contacts.find(({ name }) => name === newContact.name)) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    this.setState(prevState => {\n      return {\n        contacts: [newContact, ...prevState.contacts],\n      };\n    });\n  };\n\n  onFilterChanged = filter => {\n    this.setState({ filter });\n  };\n\n  onDelete = removeItemId => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== removeItemId),\n      };\n    });\n\n    this.saveContacts();\n  };\n\n  filteredContacts = () => {\n    let { contacts, filter } = this.state;\n    filter = filter.toLowerCase();\n\n    console.log('filteredContacts -> contacts', contacts);\n    return contacts.filter(({ name }) => name.toLowerCase().includes(filter));\n  };\n\n  render() {\n    const contacts = this.filteredContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onCreate={this.onCreate} />\n\n        <h2>Contacts</h2>\n        <Filter onFilterChanged={this.onFilterChanged} />\n        <ContactList contacts={contacts} onDelete={this.onDelete} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}